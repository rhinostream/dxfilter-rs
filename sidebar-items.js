initSidebarItems({"macro":[["compile_shader","Compile directx shader at compile time and returns byte code. it uses `D3DCompile2`. any unexplained parameters are analogous to that function."],["generate_shader","Compile DirectX shader at compile time and generates a function. The function takes an `ID3D11Device4` instance to produce respective shader."]],"mod":[["color","contains color definitions and tools for converting color from one format to another"],["error","contains definition of various errors."],["shader","Contains utils for creating Vertex and Pixel shaders from compiled shader byte code. you can easily use [`generate_shader!`] macro instead of these structs directly."],["utils","various utilities for setup with directx. If you are using this in other applications, you should not need these methods. However, for simple applications, these will be helpful"]],"struct":[["ConvertARGBToAYUV","Filter for converting [ARGBUNorm][ColorFormat::ARGB8UNorm] or [ABGRUNorm][ColorFormat::ABGR8UNorm] into [AYUV][ColorFormat::AYUV] format. filter also scales automatically based on input and output textures."],["ConvertARGBToNV12","Filter for converting [ARGBUNorm][ColorFormat::ARGB8UNorm] or [ABGRUNorm][ColorFormat::ABGR8UNorm] into [NV12][ColorFormat::NV12] format. filter also scales automatically based on input and output textures."],["ScaleARGBOrAYUV","Filter for simple scaling of [ARGBUNorm][ColorFormat::ARGB8UNorm] or [ABGRUNorm][ColorFormat::ABGR8UNorm] or [AYUV][ColorFormat::AYUV] formats."]],"trait":[["DxFilter","Interface for interacting with various filters. Interface is defined so that you could create Directx pipelines that involve multiple filters."]]});